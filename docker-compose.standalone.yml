version: '3.8'

# Standalone Docker Compose for SALTO Agent
# Users can run: curl -O https://raw.githubusercontent.com/odin2-hash/salto-agent/main/docker-compose.standalone.yml && docker-compose -f docker-compose.standalone.yml up -d

services:
  salto-agent:
    image: ghcr.io/odin2-hash/salto-agent:latest
    container_name: salto-agent
    ports:
      - "8095:8095"
    environment:
      # LLM Configuration (REQUIRED)
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - LLM_BASE_URL=${LLM_BASE_URL:-https://api.openai.com/v1}
      
      # SALTO-YOUTH Authentication (REQUIRED)
      - SALTO_USERNAME=${SALTO_USERNAME}
      - SALTO_PASSWORD=${SALTO_PASSWORD}
      
      # SALTO-YOUTH Configuration
      - OTLAS_BASE_URL=https://www.salto-youth.net/tools/otlas-partner-finding
      - USER_AGENT=SaltoAgent/1.0
      - REQUEST_DELAY=1.0
      - MAX_RETRIES=3
      - TIMEOUT_SECONDS=30
      
      # Application Settings
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
      
      # MCP Server Configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8095
      - MCP_SERVER_RELOAD=false
      - MCP_AUTH_ENABLED=${MCP_AUTH_ENABLED:-false}
      
      # Performance Settings
      - CONCURRENT_REQUESTS=${CONCURRENT_REQUESTS:-3}
      - SCRAPING_DELAY=${SCRAPING_DELAY:-1.0}
      - CONNECTION_POOL_SIZE=${CONNECTION_POOL_SIZE:-10}
    
    volumes:
      # Mount exports directory for file exports
      - salto_exports:/app/exports
      # Mount logs directory for application logs
      - salto_logs:/app/logs
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - salto-network

  # Optional: Add a reverse proxy for production (use --profile with-nginx)
  nginx:
    image: nginx:alpine
    container_name: salto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro  # Mount SSL certificates if using HTTPS
    depends_on:
      - salto-agent
    restart: unless-stopped
    networks:
      - salto-network
    profiles:
      - with-nginx

  # Optional: Redis for caching (use --profile with-redis)
  redis:
    image: redis:7-alpine
    container_name: salto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - salto-network
    profiles:
      - with-redis

  # Optional: Monitoring with Prometheus (use --profile with-monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: salto-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - salto-network
    profiles:
      - with-monitoring

volumes:
  salto_exports:
  salto_logs:
  redis_data:
  prometheus_data:

networks:
  salto-network:
    driver: bridge